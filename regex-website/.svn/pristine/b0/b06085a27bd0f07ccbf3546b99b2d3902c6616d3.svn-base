package com.regex.web.controller.enterprise;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.regex.web.common.Assist;
import com.regex.web.common.dto.info.SupplyDemandDTO;
import com.regex.web.common.dto.sys.SysUser;
import com.regex.web.controller.BaseController;
import com.regex.web.controller.vo.PageVO;
import com.regex.web.service.info.SupplyDemandService;
import com.regex.web.utils.AjaxUtil;
/**
 * 
 * 〈一句话功能简述〉<br> 
 * 供应信息
 *
 * @author admin
 * @see [相关类/方法]（可选）
 * @since [产品/模块版本] （可选）
 */
@Controller
@RequestMapping("ent/supply")
public class EntSupplyController extends BaseController {
    
    @Autowired
    private SupplyDemandService supplyDemandService;
    
    /**
     * 
     * 功能描述: <br>
     * 详情
     *
     * @param id
     * @param model
     * @return
     * @see [相关类/方法](可选)
     * @since [产品/模块版本](可选)
     */
    @RequestMapping("detial")
    public String detial(Long id, Model model) {
        try {
            SupplyDemandDTO supplyDemandDTO = supplyDemandService.selectSupplyDemandDTOById(id);
            model.addAttribute("supplyDemandDTO", supplyDemandDTO);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "enterprise/my_supply/detial";
    }
    
    /**
     * 
     * 功能描述: <br>
     * 我的求购
     *
     * @param model
     * @param assist
     * @param request
     * @return
     * @see [相关类/方法](可选)
     * @since [产品/模块版本](可选)
     */
    @RequestMapping("mysupply")
    public String mysupply() {
        return "enterprise/my_supply/show";
    }
    
    @RequestMapping(value = "getPage", method = RequestMethod.POST)
    @ResponseBody
    public void getPage(Model model, @ModelAttribute("assist") Assist assist, HttpServletResponse response, int sEcho,
            String columns, String iDisplayStart, String iDisplayLength, String sSearch,
            HttpServletRequest request) {
        SysUser user = getCurrentUser(request);
        assist.setRequires(Assist.andEq("type", "0"));
        assist.setRequires(Assist.andEq("user_id", user.getUserId()));
        assist.setRequires(Assist.andNeq("is_del", "1"));
        if(StringUtils.isEmpty(iDisplayLength)) {
            iDisplayLength = "10";
        }
        assist.setRowSize(Integer.parseInt(iDisplayLength));
        if(StringUtils.isEmpty(iDisplayStart)) {
            iDisplayStart = "0";
        }
        if(StringUtils.isNotEmpty(sSearch)) {
            assist.setRequires(Assist.customRequire("and name like concat('%',", sSearch, ",'%')"));
        }
        assist.setStartRow(Integer.parseInt(iDisplayStart));
        List<SupplyDemandDTO> datas = supplyDemandService.selectSupplyDemandDTO(assist);
        long totalCount = supplyDemandService.getSupplyDemandDTORowCount(assist);
        model.addAttribute("data", datas);
        PageVO<SupplyDemandDTO> mData = new PageVO<SupplyDemandDTO>();
        mData.setAaData(datas);
        mData.setsEcho(sEcho);
        mData.setiTotalRecords(totalCount);
        mData.setiTotalDisplayRecords(totalCount);
        AjaxUtil.ajaxJsonSucMessage(response, mData);
    }
    
    @RequestMapping("input")
    public String input(Long id, Model model) {
        if(id!= null && id > 0) {
            SupplyDemandDTO supplyDemandDTO = supplyDemandService.selectSupplyDemandDTOById(id);
            model.addAttribute("supplyDemandDTO", supplyDemandDTO);
        }
        return "enterprise/my_supply/input";
    }
    
    @RequestMapping("save")
    public void save(SupplyDemandDTO supplyDemandDTO, HttpServletResponse response,
            HttpServletRequest request) {
        SysUser user = getCurrentUser(request);
        int n = 0;
        try {
        if(StringUtils.isNotEmpty(supplyDemandDTO.getName()) && StringUtils.isNotEmpty(supplyDemandDTO.getPhone())) {
            supplyDemandDTO.setAudit("0");
            supplyDemandDTO.setUpdateTime(new Date());
            if(supplyDemandDTO.getId() > 0) {
                n = supplyDemandService.updateNonEmptySupplyDemandDTOById(supplyDemandDTO);
            } else {
                supplyDemandDTO.setType("0");
                supplyDemandDTO.setIsDel("0");
                supplyDemandDTO.setUserId(user.getUserId());
                supplyDemandDTO.setCreateTime(new Date());
                n = supplyDemandService.insertSupplyDemandDTO(supplyDemandDTO);
            }
        } else {
            n = 2;
        }
        } catch(Exception e) {
            e.printStackTrace();
            n = 3;
        }
        AjaxUtil.ajaxJsonSucMessage(response, n);
    }
    
    /**
     * 
     * 功能描述: <br>
     * 删除
     *
     * @param id
     * @param response
     * @see [相关类/方法](可选)
     * @since [产品/模块版本](可选)
     */
    @RequestMapping("del")
    public void del(Long id, HttpServletResponse response) {
        int n = 0;
        SupplyDemandDTO supplyDemandDTO = supplyDemandService.selectSupplyDemandDTOById(id);
        supplyDemandDTO.setIsDel("1");
        n = supplyDemandService.updateNonEmptySupplyDemandDTOById(supplyDemandDTO);
        AjaxUtil.ajaxJsonSucMessage(response, n);
    }
}
